<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CC's blog</title><link>https://liangcc.me/</link><description>Recent content on CC's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 13 Jan 2025 18:44:47 +0800</lastBuildDate><atom:link href="https://liangcc.me/index.xml" rel="self" type="application/rss+xml"/><item><title>2024 in Books: Shaping Technology, Society, and Progress</title><link>https://liangcc.me/posts/2025-01-13_2024_book_review/</link><pubDate>Mon, 13 Jan 2025 18:44:47 +0800</pubDate><guid>https://liangcc.me/posts/2025-01-13_2024_book_review/</guid><description>&lt;style>
.cover {
 display: flex;
 gap: 1rem;
 justify-content: center;
}
&lt;/style>
&lt;p>&lt;img src="images/cover.webp" alt="">&lt;/p>
&lt;p>&lt;em>We thank Yahsin Huang for the review and helpful feedback&lt;/em>&lt;/p>
&lt;p>It&amp;rsquo;s that time again. This post is a bit overdue - my review of the books I read in 2024.&lt;/p>
&lt;p>Some of these reviews are quick braindumps from memory, while others come from notes I took after reading, translated to English with GPT&amp;rsquo;s help. I&amp;rsquo;ve used GPT to polish the writing flow, though it can&amp;rsquo;t fix my messy thoughts. As I wrote more, I cared less about perfection. Consider this post as both a GPT-assisted output and a prompt for your own inspiration. While I&amp;rsquo;ve made my best effort to be accurate, there may be factual mistakes. I welcome feedback and discussions in DM, and I&amp;rsquo;ll do my best to respond, though I can&amp;rsquo;t guarantee timely replies.&lt;/p></description></item><item><title>Farewell PSE</title><link>https://liangcc.me/posts/2025-01-08_farewell_pse/</link><pubDate>Wed, 08 Jan 2025 16:36:13 +0800</pubDate><guid>https://liangcc.me/posts/2025-01-08_farewell_pse/</guid><description>&lt;p>December 31, 2024 marks my last day in &lt;a href="https://pse.dev">Privacy and Scaling Explorations&lt;/a>, a team supported by the Ethereum Foundation.&lt;/p>
&lt;p>My journey with the Ethereum Foundation began in late 2017. As a former local community co-organizer, I was fortunate to be trusted by the smartest and most inspiring people in the ecosystem. Throughout these seven years, I had the chance to contribute to early prototypes of Ethereum Proof of Stake, and later zero knowledge proofs and many exciting cryptography applications.&lt;/p></description></item><item><title>摘要《經濟成長：歷史與回顧》</title><link>https://liangcc.me/posts/2024-09-13_growth/</link><pubDate>Fri, 13 Sep 2024 00:09:10 +0800</pubDate><guid>https://liangcc.me/posts/2024-09-13_growth/</guid><description>&lt;p>&lt;img src="images/monkey_sails.webp" alt="">&lt;/p>
&lt;p>感謝 Yahsin Huang 和 Anton Cheng 審閱與回饋。&lt;/p>
&lt;p>看了一些人文社科的書之後，我發現了一些傾向。似乎很多主題最後都會收斂到經濟成長。&lt;/p>
&lt;ul>
&lt;li>[[台灣經濟四百年]] 在講台灣的經濟成長史&lt;/li>
&lt;li>[[Poor Economics]] 窮人的經濟學，在講為什麼極度貧窮的人沒辦法透過自行累積資本而脫離貧窮。背後的理論基本上是一個經濟成長模型，並探討成長路徑上出現哪些「陷阱」讓窮人陷入貧窮陷阱。&lt;/li>
&lt;li>[[Power and Progress]] 權力與進步。背後也是個經濟成長模型，但強調人們能主導科技發展的部分。作者算偏左經濟學家。&lt;/li>
&lt;li>看了 John Cochrane 的很多訪談和部落格。主要是想學他的貨幣理論。他算超右經濟學家吧。他認為經濟成長是經濟學聖杯，他只能貢獻一些貨幣理論這種支微末節。&lt;/li>
&lt;li>[[為工作而活]] 。作者偏人類學家，則是主張棄成長的方向。&lt;/li>
&lt;li>我沒看過人類世的資本論，但似乎台灣討論度很高。作者也是主張棄成長。&lt;/li>
&lt;/ul>
&lt;p>大致的印象是如果是經濟學家，大多偏向支持經濟成長。很多時候經濟成長當成是一切問題的解方。社會學家、人類學家、環保人士就會偏棄成長方向。&lt;/p>
&lt;h2 id="經濟成長歷史與回顧">經濟成長：歷史與回顧&lt;/h2>
&lt;p>最近在書店看到了 &lt;a href="https://www.danielsusskind.com/growth-a-reckoning">Growth: A Reckoning&lt;/a> 這本書。作者 Daniel Susskind ，台灣有出過他的前一本書「不工作的世界」。本來還在猶豫是否真的要花時間去看經濟成長這個題目，Growth 這本書在第二家書店看到的時候才買下去。我覺得這本書算蠻有效率的，回答了很多我心中好奇的問題，數量超出預期。&lt;/p>
&lt;p>這本書雖然書名是經濟成長，但那比較是個經濟學家的詞。對於關心科技與未來的讀者，我覺得是一個很棒的讀物。經濟成長會告訴你：科技、思想、資本、機器、勞力、教育等等這些事情的優先順序為何。這本書的寫法也是個出圈之作，書裡假設讀者有很少的經濟學知識，對於經濟學背景知識都用很流暢的文筆解釋核心概念。並且左打棄成長支持者，右踢全自由市場、自由貿易支持者。最後也對矽谷圈流行的長期主義做了批評。&lt;/p>
&lt;p>就如去年剛過世的諾貝爾經濟學獎得主 Robert Lucas 所說：「一旦人們開始思考經濟成長，就很難再去想其他的事情了。」&lt;/p>
&lt;p>作者認為，追逐經濟成長是一件很新、很神秘、也很危險的人類活動。很新因為持續穩定的經濟成長是二十世紀下半才開始。很神秘是因為我們不知道為什麼以前的成長能成功。很危險是因為經濟成長有很大的潛力也有很大的代價。&lt;/p>
&lt;p>對經濟學家而言，人類歷史這麼長，只有三件重要的事。前三十萬年是沒有成長的大停滯。然後兩百年前開始有現代的經濟成長，不過不太穩定。接著在大約一百年前才有持續穩定的成長。&lt;/p>
&lt;h2 id="大戰之下經濟成長成為流行">大戰之下，經濟成長成為流行&lt;/h2>
&lt;p>古典經濟學家是沒有經濟成長的概念的。經濟成長的追逐有點是個意外。1940 因為要打世界大戰，凱因斯必須要設計一套衡量國家產出的指標，來知道他能為英國籌多少戰爭資源，因此設計出了 GDP 的前身。 1933 美國那邊發生了大蕭條，Kuznets 也去設計了一套衡量國家產出的指標，來暸解到底大蕭條有多慘。&lt;/p>
&lt;p>為什麼在 1930 以前都沒人想做類似的事情？因為設計國家財富指標是一件危險的事。說出真相的人都被砍頭了。&lt;/p>
&lt;p>他們兩種設計最主要的差別是，凱因斯是要為戰爭籌錢的，所以有把軍事支出算進去。但 Kuznets 認為軍事支出是個邪惡的支出，不該列在指標裡面。美國在 1940 選擇了凱因斯的設計，畢竟戰爭期間，國防非常重要。&lt;/p>
&lt;p>冷戰之間，美蘇必須競爭資源產出，每天都在比較 GDP 。另外一個把 GDP 指標推向國際的是馬歇爾計畫：要領補助的國家必須建立統計指標，以便衡量補助的效果。&lt;/p>
&lt;p>因此熱戰冷戰之下，一下子全世界各國都有 GDP 指標了。&lt;/p>
&lt;p>經濟成長的確會帶來很多好處。經濟上的好處是減少貧窮。非經濟上的利益是更健康的生活、人們受更多教育、人們更快樂。&lt;/p>
&lt;p>對於國家的領導人而言，專注於 GDP 的成長有很多方便之處。經濟成長之下，失業的人有工作，成長帶來的經濟利益可以用於支付其他的社會議題。另外的好處就是專注成長可以延遲所有社會問題的討論，迴避社會衝突。&lt;/p></description></item><item><title>A Year in Books: Exploring Economics, History, and Identity</title><link>https://liangcc.me/posts/2024-01-24_2023_book_review/</link><pubDate>Wed, 24 Jan 2024 00:50:57 +0800</pubDate><guid>https://liangcc.me/posts/2024-01-24_2023_book_review/</guid><description>&lt;p>&lt;img src="images/cover.webp" alt="">&lt;/p>
&lt;p>&lt;em>We thank Yahsin Huang for the review and helpful feedback&lt;/em>&lt;/p>
&lt;p>I used to think that reading wasn&amp;rsquo;t my thing, but it turns out I read more books than I ever imagined I could.&lt;/p>
&lt;p>I regret not writing down these reviews sooner. Most of the books were lent out to friends, so I have to rely on my memory here. Please take my recollections with a grain of salt, as they may not be entirely accurate.&lt;/p></description></item><item><title>萬眾期待的鼠托邦 Ratopia 發售了。我體驗到了什麼是法國大革命</title><link>https://liangcc.me/posts/2023-11-07_ratopia/</link><pubDate>Tue, 07 Nov 2023 22:53:00 +0800</pubDate><guid>https://liangcc.me/posts/2023-11-07_ratopia/</guid><description>&lt;p>這是一款建築基地（Base building）、鼠窩模擬(Colony simulation) 類的遊戲。開發團隊是韓國團隊。這款遊戲人們會拿來和同類型的缺氧和泰拉瑞亞比較。&lt;/p>
&lt;p>缺氧著重在讓玩家處理空氣、水、電、食物等等資源上面顧此失彼，裡面所有的行動都要靠遊戲裡的多個複印人（Duplicant）完成。玩家沒辦法直接控制複印人，但能安排交辦事項，複印人會依照優先順序去完成。玩家扮演無知無能不仁慈獨裁者，複印人在身心正常之下不會違抗交辦事項。&lt;/p>
&lt;p>泰拉瑞亞則是玩家只操縱一位角色，著重探索與建構角色能力。但在晚上會有殭屍來襲，會需要抵禦外敵。&lt;/p>
&lt;p>在鼠托邦，玩家扮演一位鼠王，管理一群鼠民，鼠王和鼠民都是遊戲中的角色在地圖中移動。鼠王可以親力親為，砍樹挖土搬東西，也可以交辦事項讓鼠民去完成。和缺氧的差別在於鼠民需要領薪水。在完成一項建築，或是加工一件木材，鼠民會獲得金錢酬勞。&lt;/p>
&lt;p>在遊戲早期，玩家需要建造一個石碑，上面可以制定稅制。種類非常繁多，可以收所得稅、財產稅、貨物稅、使用稅。老鼠有三種社會階級，可以只對某些階級徵稅，也可以把鼠民任意分組收稅。稅也可分收定額或是按照比例，或是薪水或財產高於某個程度才收。&lt;/p>
&lt;p>總之那個設定介面非常複雜，和遊戲的可愛畫風反差很大，我一開始很敷衍的先收個財產稅和廁所使用稅。&lt;/p>
&lt;p>遊戲和泰拉瑞亞一樣有殭屍老鼠定期入侵的設定，因此隨著基地擴張，看到附近有殭屍重生點的時候要開始準備軍事手段。軍事的設定沒說太複雜，主要是要安排鼠民的職業是軍鼠，平常會做些操練鍛煉戰力。另外也有陷阱選項作為防禦策略。進階的軍種可以讓鼠王指揮，早點烙鼠去打掉殭屍老鼠重生點可以減少防禦壓力。&lt;/p>
&lt;p>但外患會隨著時間越來越強。常常外患強到攻進城內，破壞建築物。鼠王可以親身參與戰鬥，但會失血。可以蓋一張特別豪華的皇家床，睡在上面就能回血。&lt;/p>
&lt;p>玩家在遊戲一開始需要親力建造的建築就是城市入口。每過一段時間，就能在入口選擇新的鼠民加入。遊戲的進展一部分就是看都市能維持多少個鼠民。&lt;/p>
&lt;p>我在玩到大約 40 個鼠民時，陷入了一個外患內亂的循環。在一次軍隊全滅後，都市陷入一片火海，好不容易重建好，下一次的殭屍老鼠又進攻了。好不容易靠鼠王殘血防禦完成，結果內亂開始，鼠民開始造反。革命鼠會破壞建築物，必須要一隻一隻打倒，打倒完之後鼠民頭上就會有個平定的字樣出現。&lt;/p>
&lt;p>然後正當革命平定下來後，外患又來了。因為鼠王這時殘血，所以合理的做法就是去床回血。於是形成了一個衝擊性強烈的畫面（可惜我沒截到圖）：在一片都市火海之中，殭屍、革命軍、居民四處鼠竄，然後第一時間昏君鼠王在豪華的床睡大覺。
我試圖改變策略，看看遊戲中的統計圖表選項，以及檢視單一鼠民的選項。其中發現有些造反老鼠本身已經財產歸零，也沒收入。養得最肥的是稅務官老鼠和警察老鼠。醫生老鼠也沒錢，因為醫院蓋得太遠沒有患者上門就沒收入。
檢視那個可以制定稅法的石碑，原來後面還有幾個頁面，可以指定低收補助，以及勞動法規可以規定工時等等。服務和貨物的價格好像也能自訂，有點可惜那個價格並不是讓鼠民供需決定。&lt;/p>
&lt;p>在研究選項還發現可以研發外交機構和銀行，可以發現其他的鼠國並和他們借外債。&lt;/p>
&lt;p>痛定思痛，重新檢討。不過下一輪玩到政府沒錢，付不出薪水，連警察和軍隊都加入革命黨，又是另一個故事了。&lt;/p>
&lt;p>這是我第一個在 Demo 時期就被圈粉的遊戲，有在他們 Discord 裡面觀察開發者和玩家的互動。要上線了玩家比開發者還緊張，因為玩家負責貢獻介面翻譯，到上線前都還沒有處理完。&lt;/p>
&lt;p>傳統這種政策、稅都比較屬於政府模擬（ government sim ）這個遊戲類別。但那種玩起來會有種枯燥的文字閱讀或紙上談兵的感覺。配上建築基地玩起來比較動態、更有真實感。&lt;/p>
&lt;p>&lt;a href="https://store.steampowered.com/app/2244130/Ratopia/">https://store.steampowered.com/app/2244130/Ratopia/&lt;/a>&lt;/p></description></item><item><title>Schwartz-Zippel Note</title><link>https://liangcc.me/posts/2023-10-17_schwartz_zippel/</link><pubDate>Tue, 17 Oct 2023 21:15:02 +0800</pubDate><guid>https://liangcc.me/posts/2023-10-17_schwartz_zippel/</guid><description>&lt;p>Schwartz-Zippel Lemma is frequently used in Snark interactive proofs.&lt;/p>
&lt;p>For a &lt;em>non-zero&lt;/em>, $m$-variate polynomial $P: \mathbb{F}^m \to \mathbb{F}$ with degree $d$, defined on a finite field $\mathbb{F}$, the lemma states&lt;/p>
&lt;p>$$
\Pr_{X \in \mathbb{F}^m}{[P(X) = 0]} \le \frac{d}{|\mathbb{F}|}
$$&lt;/p>
&lt;p>The $|\mathbb{F}|$ is the size of the field, i.e. number of elements in it.&lt;/p>
&lt;p>Let&amp;rsquo;s forget what $m$-variate polynomial is and focus on the univariate case.&lt;/p>
&lt;p>$$
\Pr_{X \in \mathbb{F}}{[P(X) = 0]} \le \frac{d}{|\mathbb{F}|}
$$&lt;/p></description></item><item><title>The Fiscal Theory of Price Level book</title><link>https://liangcc.me/posts/2023-10-08_fiscal_theory/</link><pubDate>Thu, 14 Sep 2023 14:19:03 +0800</pubDate><guid>https://liangcc.me/posts/2023-10-08_fiscal_theory/</guid><description>&lt;p>I fell into this rabbit hole of the fiscal theory of price level (FTPL). Professor John Cochrane published the book &lt;a href="https://press.princeton.edu/books/hardcover/9780691242248/the-fiscal-theory-of-the-price-level">&amp;ldquo;The Fiscal Theory of the Price Level&amp;rdquo;&lt;/a> earlier this year. I learned about the book on Twitter before it was renamed to X. After reading some introduction, I pre-ordered a copy.&lt;/p>
&lt;p>The book&amp;rsquo;s content can help us better understand the crypto-currency and design systems. The theory looks sophisticated enough to address many academic challenges in macroeconomics but simultaneously simple enough to reason with some project ideas.&lt;/p></description></item><item><title>About CC</title><link>https://liangcc.me/about/</link><pubDate>Fri, 06 Jan 2023 00:35:59 +0800</pubDate><guid>https://liangcc.me/about/</guid><description>&lt;p>I&amp;rsquo;m interested in zero-knowledge proofs, applied cryptography, public good funding, and economics in general.&lt;/p>
&lt;p>Previously at &lt;a href="https://pse.dev/">Privacy and Scaling Explorations team&lt;/a> and Ethereum Foundation.&lt;/p>
&lt;h2 id="social">Social&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ChihChengLiang">https://github.com/ChihChengLiang&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://twitter.com/ChihChengLiang">https://twitter.com/ChihChengLiang&lt;/a>&lt;/li>
&lt;li>Farcaster: @liangcc&lt;/li>
&lt;/ul>
&lt;h2 id="projects">Projects&lt;/h2>
&lt;ul>
&lt;li>2021-04 &lt;a href="https://github.com/privacy-scaling-explorations/zkevm-circuits">Zkevm&lt;/a>. It creates succinct validity proof for EVM.&lt;/li>
&lt;li>2020-06 &lt;a href="https://github.com/thehubbleproject/hubble-contracts/">Hubble&lt;/a>, a gas-efficient optimistic rollup&lt;/li>
&lt;li>2020-04 &lt;a href="https://github.com/privacy-scaling-explorations/maci/">MACI&lt;/a>, a bribing-resistant voting infrastructure.&lt;/li>
&lt;li>2020-02 &lt;a href="https://github.com/ChihChengLiang/semaphore_auth">Semaphore Authentication&lt;/a>. Anonymous login.&lt;/li>
&lt;li>2020 &lt;a href="https://github.com/ethereum/trinity">Trinity&lt;/a>. Prototyping the Beacon chain on a new Python client&lt;/li>
&lt;li>2017-11 &lt;a href="https://github.com/karlfloersch/pyethereum">Pyethapp Casper&lt;/a>. Prototyping Casper on a Python client&lt;/li>
&lt;/ul>
&lt;h2 id="writings">Writings&lt;/h2>
&lt;p>Many of my past writings since 2016 were on &lt;a href="https://medium.com/@chihchengliang">Medium&lt;/a>. Selected articles:&lt;/p></description></item><item><title>📝資料可得性 (Data Availability)</title><link>https://liangcc.me/posts/data_availability/</link><pubDate>Fri, 29 Jul 2022 00:35:59 +0800</pubDate><guid>https://liangcc.me/posts/data_availability/</guid><description>&lt;p>在資料分片的環境底下，我們不能讓全節點去完整下載其他分片上所有的資料，否則就失去分片的意義了。&lt;/p>
&lt;p>但我們仍然要顧慮一種情況：某個分片上的惡意節點，發佈了承諾，卻窩藏承諾背後的資料沒有發布。如果說在其他分片上的全節點，都乖乖收下了帶有這個承諾的區塊，這會是個危險的情況。相當於整個系統產出了一個區塊，但區塊上屬於該分片上的資料，除了惡意節點外沒有人知道是什麼。&lt;/p>
&lt;p>要解決這個問題可以引入兩個機制：抽樣挑戰和糾刪碼。&lt;/p>
&lt;p>抽樣挑戰是我們可以把該分片需要發布的資料切成幾等份，並要求全節點對其抽樣。例如切為 256 份，並對其抽取 75 份。全節點必須在抽樣的 75 份的資料都有正確回應的情況下，才能收下區塊。注意這時候惡意節點的選擇變成到底 256 份的資料中要發布幾份和窩藏幾份。抽樣挑戰的好處是全節點只要少少的抽樣，惡意節點必須發布很大比例的資料（例如 250 份），才能讓全網大部分的全節點完成挑戰並收下區塊。&lt;/p>
&lt;p>但發布很大比例的資料仍然不夠，只要惡意節點能夠窩藏一份資料，這區塊就是一個資料不完整的不合格區塊。所以我們除了抽樣挑戰外還需要糾刪碼。&lt;/p>
&lt;p>糾刪碼是原來資料的延伸，我們可以把原本的 256 份延伸出另外 256 份糾刪碼，總共 512 份。糾刪碼的性質是只要能在 512 份中取得任何 256 份，就能還原出原本資料的 256 份。惡意節點要通過抽樣挑戰，現在必須發布 512 份中大比例的份額，例如 500 份。但這 500 份足夠讓網路中的節點湊出剩下任何窩藏的 12 份了。&lt;/p>
&lt;p>網路中的節點必須完成抽樣挑戰才能收下區塊。節點有抽不到的份額而沒辦法完成挑戰時，可以等別的節點分享從糾刪碼還原回來的份額，最終還是能完成。當整個網路都收下某個區塊時，我們可以確認原本資料的 256 份都是有發布出來的。而且這中間滿足擴容的條件，也就是全節點都只有下載少於 256 份的資料。&lt;/p>
&lt;hr>
&lt;h2 id="數學細節">數學細節&lt;/h2>
&lt;h3 id="抽樣挑戰">抽樣挑戰&lt;/h3>
&lt;p>假設 256 份裡面，惡意節點釋出了 X 比例的份額。節點抽樣 75 份，都沒抽到窩藏部分的機率是 $X^{75}$ 。在 X 為 50% 時，機率是 $10^{-23}$ ，在 X 為 75% 時，機率還是 $10^{-10}$ 的極小數字。但在 X 為 99% 時，機率上升到 0.47 了。&lt;/p></description></item><item><title>📝Quadratic Funding in plain words</title><link>https://liangcc.me/posts/qf/</link><pubDate>Mon, 20 Jun 2022 21:45:09 +0000</pubDate><guid>https://liangcc.me/posts/qf/</guid><description>&lt;p>This is my quick compilation of all the QF-related sources I&amp;rsquo;ve seen recently. The goal is to give high-level intuitions before diving into the math.&lt;/p>
&lt;p>There are two challenges in public good funding:&lt;/p>
&lt;ul>
&lt;li>How do you get the money?&lt;/li>
&lt;li>How do you distribute the money when you get it?&lt;/li>
&lt;/ul>
&lt;p>In a private good situation, users pay for what they get. They can pay it now for the things they benefit from. Incentives send the right signal to the market.&lt;/p></description></item><item><title>📘池化檢驗量能</title><link>https://liangcc.me/posts/pooled_test/</link><pubDate>Wed, 18 May 2022 09:50:12 +0000</pubDate><guid>https://liangcc.me/posts/pooled_test/</guid><description>&lt;blockquote>
&lt;p>mcdlee: 如果陽性率是 p，總共有 N個檢體。每 n 個檢體做一次池化檢驗，一旦陽性，則該批 n 支各自重做。這樣消耗的檢驗量能的期望值會是&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>可以把檢驗分成確定性和不確定性的部分&lt;/p>
&lt;h3 id="確定性的部分">確定性的部分&lt;/h3>
&lt;p>共有 $\frac{N}{n}$ 個池，每個池驗一次的話，總共需要 $\frac{N}{n}$ 次檢驗&lt;/p>
&lt;h3 id="不確定性的部分">不確定性的部分&lt;/h3>
&lt;p>這是來自因為一個池子中驗出陽性時，需要池子裡全員檢測的檢測數&lt;/p>
&lt;p>定義陰性率&lt;/p>
&lt;p>$$
q := 1 -p
$$&lt;/p>
&lt;p>一個池會驗出陽性的機率為&lt;/p>
&lt;p>$$
1 - q^n
$$&lt;/p>
&lt;p>考量所有池，因為驗出陽性，而要 n 個檢體都檢驗，所需檢驗次數的期望值&lt;/p>
&lt;p>$$
\frac{N}{n} \times (1 - q^n) \times n = (1 - q^n) N
$$&lt;/p>
&lt;p>所以確定性的 $\frac{N}{n}$ 加上不確定性的 $(1 - q^n) N$ ，總共預期要做的檢驗次數是&lt;/p>
&lt;p>$$
\frac{N}{n} + (1 - q^n) N
$$&lt;/p>
&lt;h3 id="問題最佳的分組人數-n-是多少呢">問題：最佳的分組人數 n 是多少呢？&lt;/h3>
&lt;p>n 越多的話，代表分組比較少，確定性的的檢驗會變少。但組裡面出現陽性者的機率就會變高，不確定性的檢驗就會變多。所以看起來有個平衡點，有個最適的 n 能夠讓檢驗能量的消耗最小&lt;/p></description></item><item><title>📝權益證明（Proof of Stake）的簡易切入點</title><link>https://liangcc.me/posts/pos/</link><pubDate>Sun, 27 Mar 2022 17:50:09 +0000</pubDate><guid>https://liangcc.me/posts/pos/</guid><description>&lt;h3 id="前言">前言&lt;/h3>
&lt;p>權益證明（Proof of Stake）是一項重要的區塊鏈技術，但目前常見的介紹資源往往有太多下列問題：&lt;/p>
&lt;ol>
&lt;li>資訊太攏統： 以太坊社群官方網站 ethereum.org 的資訊屬於這類。可以得到一個概觀，但無法深入細節。&lt;/li>
&lt;li>太多實作細節與時效性內容：以太坊的共識客戶端規格 &lt;a href="https://github.com/ethereum/consensus-specs">consensus specs&lt;/a> 是以太坊權益證明最新也最具權威性的文件，因為所有客戶端軟體需要依照這份文件去實作。但讀者直接看大概會有這樣的困擾。&lt;/li>
&lt;/ol>
&lt;p>以太坊的權益證明的開發更新迅速，幾乎每天都有新的進展。本文想要討論比較不再改動的簡易切入點，幫助讀者建立思考框架，以跟上最新的進展。&lt;/p>
&lt;h3 id="工作量證明和權益證明都是一種資產證明proof-of-asset的特例">工作量證明和權益證明都是一種資產證明（Proof of Asset）的特例&lt;/h3>
&lt;p>權益證明是一群驗證者（Validator）抵押一定數量的數位資產以參與區塊鏈的共識。這裡的驗證者，會根據下文脈絡，可能指的是節點機器本身，或是擁有節點與抵押的數位資產的擁有者。&lt;/p>
&lt;p>這是相對工作量證明（Proof of work），一群礦工（Miner），可能購入顯示卡或客製化的機器，並消耗電力以參與區塊鏈的共識。&lt;/p>
&lt;p>區塊鏈的本體是一群連線的節點網路，節點同步並備份著同樣的資料，這裡的資料可以包含資產的餘額，可以包含合約的狀態等等。為了讓資料的寫入不被單一機構或單位所掌控，必須把寫入權分散到全世界不同的陌生人。接著節點網路必須要對寫入的資料取得共識，也就是資料（例如所有人資產的餘額）要能夠一致。&lt;/p>
&lt;p>但是分散到全世界不同的陌生人，有個問題。因為我們沒辦法檢查陌生人的身分證去建立身份識別。一種解決方式是認資產不認人頭。我們只要做到說假設有攻擊者想要製造分身時，需要取得額外的資產，攻擊成本會增加即可。&lt;/p>
&lt;p>認資產的方式就是，節點在送出訊息與其他節點溝通時，在訊息上用某種方式證明持有該項資產，以說服其他的節點接受訊息。&lt;/p>
&lt;p>以工作量證明而言，當一個訊息附帶雜湊值挑戰的解答時，其他節點可以相信發出訊息的節點擁有一定性能的機器，並曾經耗費電力運算出解答。&lt;/p>
&lt;p>以權益證明而言，抵押數位資產的驗證者清單就剛好在區塊鏈上，清單上有驗證者的公鑰。只要在訊息上附上驗證者的數位簽章，其他節點可以相信發出訊息的節點是抵押資產的驗證者。&lt;/p>
&lt;p>工作量證明和權益證明，我們都可以稱他們是一種資產證明（Proof of asset）的特例。但兩者本質上的區別是什麼？&lt;/p>
&lt;p>工作量證明和權益證明最關鍵的區別就是：&lt;strong>礦工的礦機存在於現實世界，但驗證者抵押的數位資產記錄在區塊鏈上。&lt;/strong>&lt;/p>
&lt;p>聽起來沒什麼特別，但對區塊鏈安全的意義是什麼？區塊鏈沒辦法遠端燒毀實體世界的礦機，但&lt;strong>區塊鏈能把數位資產的餘額改成零&lt;/strong>。&lt;/p>
&lt;h3 id="在權益證明可以引入懲罰機制提升協議安全性">在權益證明可以引入懲罰機制提升協議安全性&lt;/h3>
&lt;p>寫入節點的行為是必須要控制的，當協定設計者設計了一個協定要寫入節點去遵守，協定設計者必須設計相對應的誘因去引導節點的行為。以工作量證明為例，行為良好的寫入節點應該：&lt;/p>
&lt;ol>
&lt;li>在最長鏈上產生區塊&lt;/li>
&lt;li>在區塊內納入交易&lt;/li>
&lt;/ol>
&lt;p>協定以增發的數位資產獎勵礦工去做第一項。而使用者提供手續費吸引礦工做第二項：納入交易。&lt;/p>
&lt;p>壞人的寫入節點，可以完全不做上面兩件事。在某些條件下，他們還有辦法巧妙的送出一些訊息去玩弄系統共識以製造一些攻擊。著名的例子如 51% 攻擊，當礦工或驗證者掌握過半數的共識用資產，能夠說服網路承認某筆交易，花了一些錢，再讓網路否認同一筆交易，好像那筆錢沒花過一樣。&lt;/p>
&lt;p>一般人們談論誘因，會包含棒子與蘿蔔，做好事吃蘿蔔做壞事挨棒子。在工作量證明之下，其實只有增發的幣與手續費這兩個蘿蔔。基本上沒有棒子可言。&lt;/p>
&lt;p>相較之下，能夠消滅抵押的數位資產則是一支很長的棒子，能設計不同程度的懲罰來引導驗證者的行為。為什麼需要不同程度的懲罰？這是因為有些行為是可歸責，有些不可歸責。&lt;/p>
&lt;p>例如，如果驗證者甲發出了兩個互相矛盾的訊息（Equivocate）試圖造成節點共識分歧，並且有其他節點撿到了這兩個訊息送到區塊鏈上，區塊鏈能夠直接消滅甲大量的抵押資產，予以經濟重擊。因為兩個訊息都有該驗證者的數位簽章，訊息是否矛盾也有簡單的演算法決定，責任十分容易歸屬。&lt;/p>
&lt;p>但若驗證者乙因故離線一段時間，沒照協定規定送出該送的訊息，區塊鏈只能予以輕微懲罰。這是因為區塊鏈沒辦法區分乙是因為惡意離線，或是因為其他驗證者節點屏蔽乙，完全不收乙的訊息。由於責任無法歸屬，所以只能做輕微懲罰，但懲罰的金額會隨時間遞增。&lt;/p>
&lt;p>一部分讀者能在 consensus specs 觀察的重點，就是各種賞罰的設計以及緣由。&lt;/p>
&lt;h3 id="權益證明的設計挑戰">權益證明的設計挑戰&lt;/h3>
&lt;p>這裡想提人們比較常問的以及實際當驗證者會體驗到的設計挑戰。理論上的挑戰 &lt;a href="https://arxiv.org/pdf/1710.09437.pdf">Casper FFG 的論文&lt;/a> 比較有詳細說明。&lt;/p>
&lt;h4 id="亂數">亂數&lt;/h4>
&lt;p>在資產證明中，常常需要能依照資產比例隨機選擇一個持有者發訊息。這個隨機選擇的方式不能被輕易操控，否則誇張一點是都會永遠選到同一批人，或複雜一點的話是攻擊者可以得到多過於其持有資產比例的優勢。&lt;/p>
&lt;p>在工作量證明中，因為雜湊值挑戰完成的時間本身夠隨機，也與算力比例有關，所以某種程度已經達成依照算力比例對礦工抽籤的效果。&lt;/p>
&lt;p>在權益證明中，則需要設計一個亂數產生方式來對驗證者抽籤，這個亂數來源稱之為 random beacon。這也是信標鏈（Beacon chain）名稱的由來。目前用 RANDAO 實作，未來會用 VDF 實作。&lt;/p>
&lt;h4 id="進出系統">進出系統&lt;/h4>
&lt;p>寫入節點如果能夠很快速隨性地進出系統，將會有許多攻擊空間。&lt;/p>
&lt;p>在工作量證明中，礦工可以隨時想參與共識就參與，離開就離開，系統不做限制。權益證明中，抵押成為驗證者需要排隊，想領回押金不當驗證者也需要排隊。&lt;/p>
&lt;h3 id="權益證明其他的好處">權益證明其他的好處&lt;/h3>
&lt;h4 id="可以降低新幣發行量">可以降低新幣發行量&lt;/h4>
&lt;p>&lt;a href="https://vitalik.eth.limo/general/2020/11/06/pos2020_zhTW.html">為什麼權益證明棒棒的&lt;/a> 一文中，討論由於工作量證明的攻擊成本大多為營運成本，但權益證明的成本大多為資金成本。假設每天協議發出 1 元的區塊獎勵來吸引共識資產，換算要讓鏈無法使用 6 小時的攻擊成本，GPU 挖礦為 0.26 元，但權益證明的是 2189 元。這代表同樣發行量下，權益證明比工作量證明更安全。&lt;/p></description></item><item><title>📝全節點 Demo</title><link>https://liangcc.me/posts/full_node_demo/</link><pubDate>Sun, 28 Feb 2021 13:35:56 +0000</pubDate><guid>https://liangcc.me/posts/full_node_demo/</guid><description>&lt;h2 id="先備知識">先備知識&lt;/h2>
&lt;p>主網路&lt;/p>
&lt;ol>
&lt;li>以太坊系統的本體是一個點對點網路。&lt;/li>
&lt;li>全節點大概要同步個一天以上&lt;/li>
&lt;li>全節點大概要吃掉 250 GB 的硬碟空間&lt;/li>
&lt;li>主網路 要用真的以太幣才能部署合約&lt;/li>
&lt;li>測試網路 有水龍頭可以領測試用的測試幣&lt;/li>
&lt;li>「狀態」的讀取，免費&lt;/li>
&lt;li>「狀態」的寫入，要送花費 gas 的交易&lt;/li>
&lt;/ol>
&lt;h2 id="三天前的準備">三天前的準備&lt;/h2>
&lt;p>先同步好一個全節點，當天可以快速展示&lt;/p>
&lt;h2 id="demo-主網路">Demo 主網路&lt;/h2>
&lt;p>步驟：&lt;/p>
&lt;ol>
&lt;li>展示全節點的 Log&lt;/li>
&lt;li>展示連接上全節點，並瀏覽合約裡面的資料&lt;/li>
&lt;/ol>
&lt;p>決策：要讀什麼合約的資料出來玩比較好玩呢？&lt;/p>
&lt;h2 id="設定全節點">設定全節點&lt;/h2>
&lt;pre tabindex="0">&lt;code>sudo apt install build-essential
&lt;/code>&lt;/pre>&lt;p>安裝 golang&lt;/p>
&lt;pre tabindex="0">&lt;code>wget -q -O - https://git.io/vQhTU | bash
&lt;/code>&lt;/pre>&lt;p>下載並建置 Geth&lt;/p>
&lt;pre tabindex="0">&lt;code>git clone https://github.com/ethereum/go-ethereum.git
cd go-ethereum
make geth
&lt;/code>&lt;/pre>&lt;p>跑主網路&lt;/p>
&lt;pre tabindex="0">&lt;code>geth
&lt;/code>&lt;/pre>&lt;h2 id="demo-從全節點取得資料">Demo 從全節點取得資料&lt;/h2>
&lt;pre tabindex="0">&lt;code>geth attach &amp;lt;要找 ipc path&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="瀏覽區塊交易相關資料">瀏覽區塊、交易相關資料&lt;/h3>
&lt;ul>
&lt;li>net.version
&lt;ul>
&lt;li>解釋主網路和其他測試網路&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>eth.getBlockNumber()&lt;/li>
&lt;li>eth.getBlockByNumber(100)
&lt;ul>
&lt;li>挑幾個區塊裡面重要的欄位解釋&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="瀏覽帳戶餘額">瀏覽帳戶餘額&lt;/h3>
&lt;p>解釋帳戶是什麼，私鑰公鑰數位簽章。EOA 與合約帳戶&lt;/p>
&lt;ul>
&lt;li>eth.getBalance&lt;/li>
&lt;/ul>
&lt;h3 id="瀏覽合約資料">瀏覽合約資料&lt;/h3>
&lt;ul>
&lt;li>eth.getCode()
&lt;ul>
&lt;li>選一個合約地址，看 bytecode 與 etherscan 上面的是否吻合&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="呼叫函式與瀏覽合約狀態">呼叫函式與瀏覽合約狀態&lt;/h3>
&lt;p>(這項看起來需要 js library 配合比較容易做)&lt;/p></description></item></channel></rss>